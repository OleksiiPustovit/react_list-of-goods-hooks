{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","React","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","onClick","type","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mFAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA+BE,IAAME,EAAgB,WAC3B,MAAoCC,IAAMC,UAAS,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCH,IAAMC,SAASJ,EAASO,MAAxD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EA9CD,SACLC,EACAH,EACAH,GAEA,IAAMK,EAAY,YAAOC,GAiBzB,OAfAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAKR,EAASe,QACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAITb,GACFK,EAAaS,UAGRT,EAwBcU,CACnBnB,EACAO,EACAH,GAGF,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QA3BqB,WAC3Bb,EAAYT,EAASe,UA2BfQ,KAAK,SACLF,UAAWG,IACT,SACA,UACA,CAAE,WAAYhB,IAAaR,EAASe,UANxC,iCAYA,wBACEO,QAnCmB,WACzBb,EAAYT,EAASiB,SAmCfM,KAAK,SACLF,UAAWG,IACT,SACA,aACA,CAAE,WAAYhB,IAAaR,EAASiB,SANxC,4BAYA,wBACEK,QA3Cc,WACpBhB,GAAeD,IA2CTkB,KAAK,SACLF,UAAWG,IACT,SACA,aACA,CAAE,YAA2B,IAAfnB,IANlB,sBAYgB,IAAfA,GAAwBG,IAAaR,EAASO,KAAO,GAElD,wBACEe,QArDQ,WAClBb,EAAYT,EAASO,MACrBD,GAAc,IAoDJiB,KAAK,SACLF,UAAU,4BAHZ,sBAUN,6BACE,6BACGX,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC/HpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6bb9f2de.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = React.useState(false);\n  const [sortType, setSortType] = React.useState(SortType.NONE);\n\n  const handleSortByAlphabet = () => {\n    setSortType(SortType.ALPABET);\n  };\n\n  const handleSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={handleSortByAlphabet}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={handleSortByLength}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleReverse}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed !== true },\n          )}\n        >\n          Reverse\n        </button>\n\n        {isReversed === false && sortType === SortType.NONE ? ''\n          : (\n            <button\n              onClick={handleReset}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}